
'use client';

import { useState } from 'react';
import { db, ContactMessage } from '@/lib/supabase';
import { FadeIn, StaggerChildren } from './Animations';

const ContactSection = ({ locale, dict }: { locale: string; dict: any }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const [focusedField, setFocusedField] = useState<string | null>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleFocus = (field: string) => {
    setFocusedField(field);
  };

  const handleBlur = () => {
    setFocusedField(null);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitError('');

    try {
      await db.createContactMessage(formData as ContactMessage);
      setSubmitSuccess(true);
      setFormData({
        name: '',
        email: '',
        subject: '',
        message: ''
      });
    } catch (error) {
      console.error('Error submitting form:', error);
      setSubmitError(dict.contact.form.error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const contactInfo = [
    {
      id: 'phone',
      title: dict.contact.info.phone,
      value: '+201024886944',
      link: 'tel:+201024886944',
      icon: 'ri-phone-line'
    },
    {
      id: 'email',
      title: dict.contact.info.email,
      value: 'info@seagreats.com',
      link: 'mailto:info@seagreats.com',
      icon: 'ri-mail-line'
    },
    {
      id: 'location',
      title: dict.contact.info.location,
      value: locale === 'en' ? 'Egypt, Suez, Port Said, Near Gate 5' : 'مصر، السويس، بورتوفيق، بجوار ميناء باب 5',
      link: 'https://maps.google.com/?q=Suez,Egypt',
      icon: 'ri-map-pin-line'
    },
    {
      id: 'hours',
      title: locale === 'en' ? 'Working Hours' : 'ساعات العمل',
      value: locale === 'en' ? 'Mon-Fri: 9AM - 5PM' : 'الإثنين-الجمعة: 9 ص - 5 م',
      link: null,
      icon: 'ri-time-line'
    }
  ];

  return (
    <section className="py-20 bg-gradient-to-b from-white to-secondary-50 relative overflow-hidden">
      {/* Decorative background elements */}
      <div className="absolute top-0 left-0 right-0 h-40 bg-gradient-to-b from-white to-transparent"></div>
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-20 -right-20 w-96 h-96 rounded-full bg-primary-50 blur-3xl opacity-60"></div>
        <div className="absolute -bottom-20 -left-20 w-96 h-96 rounded-full bg-secondary-50 blur-3xl opacity-60"></div>
      </div>

      <div className="container mx-auto px-4 relative z-10">
        <FadeIn direction="up" delay={100} className="text-center mb-16">
          <span className="text-primary-600 font-semibold text-sm uppercase tracking-wider mb-2 block">
            {dict.contact.subtitle}
          </span>
          <h2 className="text-3xl md:text-4xl font-bold text-secondary-900 mb-4">
            {dict.contact.title}
          </h2>
          <div className="w-24 h-1 bg-gradient-to-r from-primary-500 to-secondary-500 mx-auto my-6"></div>
          <p className="text-lg text-secondary-600 max-w-3xl mx-auto">
            {dict.contact.description}
          </p>
        </FadeIn>

        <div className="flex flex-col lg:flex-row gap-12 items-stretch">
          {/* Contact Form */}
          <FadeIn direction="right" delay={300} className="lg:w-1/2">
            {submitSuccess ? (
              <div className="bg-gradient-to-br from-green-50 to-green-100 border border-green-200 rounded-xl p-8 text-center shadow-lg h-full flex flex-col items-center justify-center">
                <div className="w-20 h-20 bg-green-100 text-green-600 rounded-full flex items-center justify-center mb-6 animate-pulse">
                  <i className="ri-check-line text-4xl"></i>
                </div>
                <h3 className="text-2xl font-bold text-green-800 mb-4">
                  {dict.contact.form.success}
                </h3>
                <p className="text-green-700 mb-6 max-w-md">
                  {locale === 'en' 
                    ? 'We have received your message and will get back to you as soon as possible.'
                    : 'لقد تلقينا رسالتك وسنرد عليك في أقرب وقت ممكن.'}
                </p>
                <button
                  onClick={() => setSubmitSuccess(false)}
                  className="mt-4 bg-green-600 text-white px-6 py-3 rounded-md hover:bg-green-700 transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                >
                  {locale === 'en' ? 'Send Another Message' : 'إرسال رسالة أخرى'}
                </button>
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-xl p-8 h-full transform transition-all duration-300 hover:shadow-2xl hover:-translate-y-1">
                <h3 className="text-2xl font-bold text-gradient mb-6">
                  {locale === 'en' ? 'Send Us a Message' : 'أرسل لنا رسالة'}
                </h3>

                {submitError && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 animate-pulse">
                    <p className="text-red-700 flex items-center">
                      <i className="ri-error-warning-line mr-2 text-lg"></i>
                      {submitError}
                    </p>
                  </div>
                )}

                <form onSubmit={handleSubmit} className="space-y-6">
                  <div className="relative">
                    <label 
                      htmlFor="name" 
                      className={`absolute ${
                        focusedField === 'name' || formData.name ? 
                        'text-xs -top-2 text-primary-600' : 
                        'text-base top-3 text-gray-500'
                      } left-3 bg-white px-1 transition-all duration-200`}
                    >
                      {dict.contact.form.name} *
                    </label>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      value={formData.name}
                      onChange={handleChange}
                      onFocus={() => handleFocus('name')}
                      onBlur={handleBlur}
                      required
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200"
                    />
                  </div>

                  <div className="relative">
                    <label 
                      htmlFor="email" 
                      className={`absolute ${
                        focusedField === 'email' || formData.email ? 
                        'text-xs -top-2 text-primary-600' : 
                        'text-base top-3 text-gray-500'
                      } left-3 bg-white px-1 transition-all duration-200`}
                    >
                      {dict.contact.form.email} *
                    </label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={formData.email}
                      onChange={handleChange}
                      onFocus={() => handleFocus('email')}
                      onBlur={handleBlur}
                      required
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200"
                    />
                  </div>

                  <div className="relative">
                    <label 
                      htmlFor="subject" 
                      className={`absolute ${
                        focusedField === 'subject' || formData.subject ? 
                        'text-xs -top-2 text-primary-600' : 
                        'text-base top-3 text-gray-500'
                      } left-3 bg-white px-1 transition-all duration-200`}
                    >
                      {dict.contact.form.subject} *
                    </label>
                    <input
                      type="text"
                      id="subject"
                      name="subject"
                      value={formData.subject}
                      onChange={handleChange}
                      onFocus={() => handleFocus('subject')}
                      onBlur={handleBlur}
                      required
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200"
                    />
                  </div>

                  <div className="relative">
                    <label 
                      htmlFor="message" 
                      className={`absolute ${
                        focusedField === 'message' || formData.message ? 
                        'text-xs -top-2 text-primary-600' : 
                        'text-base top-3 text-gray-500'
                      } left-3 bg-white px-1 transition-all duration-200`}
                    >
                      {dict.contact.form.message} *
                    </label>
                    <textarea
                      id="message"
                      name="message"
                      value={formData.message}
                      onChange={handleChange}
                      onFocus={() => handleFocus('message')}
                      onBlur={handleBlur}
                      required
                      rows={5}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200"
                    ></textarea>
                  </div>

                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full bg-gradient-to-r from-primary-600 to-primary-700 text-white py-3 px-6 rounded-lg font-medium hover:shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-[1.02] active:scale-[0.98]"
                  >
                    {isSubmitting ? (
                      <span className="flex items-center justify-center">
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        {locale === 'en' ? 'Sending...' : 'جاري الإرسال...'}
                      </span>
                    ) : (
                      dict.contact.form.submit
                    )}
                  </button>
                </form>
              </div>
            )}
          </FadeIn>

          {/* Contact Info */}
          <FadeIn direction="left" delay={500} className="lg:w-1/2">
            <div className="bg-gradient-to-br from-primary-700 to-primary-900 text-white rounded-xl shadow-xl p-8 h-full relative overflow-hidden">
              {/* Decorative pattern */}
              <div className="absolute inset-0 opacity-10">
                <div className="absolute -right-20 -top-20 w-80 h-80 rounded-full border-8 border-white/20"></div>
                <div className="absolute -left-20 -bottom-20 w-80 h-80 rounded-full border-8 border-white/20"></div>
              </div>

              <div className="relative z-10">
                <h3 className="text-2xl font-bold mb-8 border-b border-primary-500/30 pb-4">
                  {locale === 'en' ? 'Get in Touch' : 'تواصل معنا'}
                </h3>

                <StaggerChildren initialDelay={100} staggerDelay={200} direction="up" className="space-y-8">
                  {contactInfo.map((item) => (
                    <div key={item.id} className="flex items-start hover-scale">
                      <div className="bg-white/10 p-3 rounded-lg mr-4 rtl:ml-4 rtl:mr-0">
                        <i className={`${item.icon} text-xl`}></i>
                      </div>
                      <div>
                        <h4 className="font-semibold text-lg mb-1">
                          {item.title}
                        </h4>
                        {item.link ? (
                          <a
                            href={item.link}
                            className="text-primary-100 hover:text-white transition-colors inline-flex items-center group"
                            target={item.id === 'location' ? '_blank' : undefined}
                            rel={item.id === 'location' ? 'noopener noreferrer' : undefined}
                          >
                            {item.value}
                            <i className="ri-arrow-right-line ml-1 rtl:mr-1 rtl:ml-0 opacity-0 group-hover:opacity-100 transition-opacity transform group-hover:translate-x-1 rtl:group-hover:-translate-x-1"></i>
                          </a>
                        ) : (
                          <p className="text-primary-100">
                            {item.value}
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </StaggerChildren>

                <div className="mt-12 pt-6 border-t border-primary-500/30">
                  <h4 className="font-semibold text-lg mb-4">
                    {locale === 'en' ? 'Follow Us' : 'تابعنا'}
                  </h4>
                  <div className="flex space-x-4 rtl:space-x-reverse">
                    <a href="#" className="bg-white/10 hover:bg-white/20 w-10 h-10 rounded-full flex items-center justify-center transition-colors hover:scale-110 transform">
                      <i className="ri-facebook-fill text-lg"></i>
                    </a>
                    <a href="#" className="bg-white/10 hover:bg-white/20 w-10 h-10 rounded-full flex items-center justify-center transition-colors hover:scale-110 transform">
                      <i className="ri-twitter-x-fill text-lg"></i>
                    </a>
                    <a href="#" className="bg-white/10 hover:bg-white/20 w-10 h-10 rounded-full flex items-center justify-center transition-colors hover:scale-110 transform">
                      <i className="ri-linkedin-fill text-lg"></i>
                    </a>
                    <a href="#" className="bg-white/10 hover:bg-white/20 w-10 h-10 rounded-full flex items-center justify-center transition-colors hover:scale-110 transform">
                      <i className="ri-instagram-fill text-lg"></i>
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </FadeIn>
        </div>

        {/* Map */}
        <FadeIn direction="up" delay={700} className="mt-16">
          <div className="bg-white rounded-xl shadow-lg overflow-hidden h-80">
            <iframe 
              src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d54826.20337837342!2d32.35246742063849!3d31.25879339165612!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x14f99c3e939e6b99%3A0xf7fb3d82cef7e5e!2sPort%20Said%2C%20Port%20Said%20Governorate!5e0!3m2!1sen!2seg!4v1627669956824!5m2!1sen!2seg" 
              width="100%" 
              height="100%" 
              style={{ border: 0 }} 
              allowFullScreen 
              loading="lazy" 
              referrerPolicy="no-referrer-when-downgrade"
              title="Sea Greats Location"
              className="filter grayscale hover:grayscale-0 transition-all duration-700"
            ></iframe>
          </div>
        </FadeIn>
      </div>
    </section>
  );
};

export default ContactSection;
