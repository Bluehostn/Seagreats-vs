
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import LanguageSwitcher from './LanguageSwitcher';
import { getDictionary, type Language } from '../lib/dictionaries';

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [language, setLanguage] = useState<Language>('ar');
  const [mounted, setMounted] = useState(false);
  const [scrolled, setScrolled] = useState(false);

  useEffect(() => {
    setMounted(true);
    const savedLang = (localStorage.getItem('language') || 'ar') as Language;
    setLanguage(savedLang);

    const handleScroll = () => {
      setScrolled(window.scrollY > 20);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  if (!mounted) {
    return (
      <header className="bg-white shadow-lg sticky top-0 z-50">
        <div className="container mx-auto px-4">
          <div className="flex items-center justify-between h-20">
            <Link href="/" className="flex items-center space-x-3 rtl:space-x-reverse">
              <img
                src="https://static.readdy.ai/image/dfa00478676086a8624b0f515714071b/f14f9993bcd951a53cd82f20c8f9e072.png"
                alt="Sea Greats Logo"
                className="w-16 h-16 object-contain"
              />
              <span className="logo-text text-3xl font-bold text-primary-700">Sea Greats</span>
            </Link>
            <div className="w-8 h-8"></div>
          </div>
        </div>
      </header>
    );
  }

  const dict = getDictionary(language);

  const menuItems = [
    { 
      href: '/', 
      label: dict.nav.home
    },
    { 
      href: '/about', 
      label: dict.nav.about
    },
    {
      href: '/services',
      label: dict.nav.services,
      submenu: [
        { href: '/services/ship-supply', label: dict.services.sections.shipSupply.title },
        { href: '/services/machinery-supplies', label: dict.services.sections.machinery.title },
        { href: '/services/marine-equipment', label: dict.services.sections.marine.title },
        { href: '/services/food-supplies', label: dict.services.sections.food.title },
        { href: '/services/technical-services', label: dict.services.sections.technical.title },
        { href: '/services/consulting', label: dict.services.sections.consulting.title }
      ]
    },
    { 
      href: '/contact', 
      label: dict.nav.contact
    }
  ];

  return (
    <header
      className={`sticky top-0 z-50 transition-all duration-300 ${
        scrolled
          ? 'bg-white/95 backdrop-blur-sm shadow-md py-2'
          : 'bg-white shadow-lg py-0'
      }`}
    >
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16 md:h-20">
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-3 rtl:space-x-reverse">
            <img
              src="https://static.readdy.ai/image/dfa00478676086a8624b0f515714071b/f14f9993bcd951a53cd82f20c8f9e072.png"
              alt="Sea Greats Logo"
              className={`object-contain transition-all duration-300 ${scrolled ? 'w-12 h-12' : 'w-16 h-16'}`}
            />
            <span className="logo-text text-2xl md:text-3xl font-bold text-primary-700">
              Sea Greats
            </span>
          </Link>

          {/* Desktop Menu */}
          <nav className="hidden lg:flex items-center space-x-6 rtl:space-x-reverse">
            {menuItems.map((item, index) => (
              <div key={index} className="relative group">
                <Link
                  href={item.href}
                  className="text-gray-700 hover:text-primary-600 font-medium transition-all duration-200 py-2 border-b-2 border-transparent hover:border-primary-500 whitespace-nowrap"
                >
                  {item.label}
                </Link>
                {item.submenu && (
                  <div className="absolute top-full right-0 rtl:right-auto rtl:left-0 mt-1 w-64 bg-white shadow-lg rounded-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300 transform translate-y-2 group-hover:translate-y-0">
                    <div className="py-2 rounded-lg overflow-hidden">
                      {item.submenu.map((subitem, subindex) => (
                        <Link
                          key={subindex}
                          href={subitem.href}
                          className="block px-4 py-2 text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-colors whitespace-nowrap"
                        >
                          {subitem.label}
                        </Link>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            ))}
            <div className="border-r border-gray-200 h-6 mx-2"></div>
            <LanguageSwitcher />
            <Link
              href="/admin"
              className="btn btn-primary rounded-full text-sm whitespace-nowrap"
            >
              {dict.nav.admin}
            </Link>
          </nav>

          {/* Mobile Menu Button */}
          <div className="flex items-center space-x-4 rtl:space-x-reverse lg:hidden">
            <LanguageSwitcher />
            <button
              className="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              aria-label="Toggle Menu"
            >
              <i className={`ri-${isMenuOpen ? 'close' : 'menu'}-line text-2xl text-gray-700`}></i>
            </button>
          </div>
        </div>

        {/* Mobile Menu */}
        <div
          className={`lg:hidden fixed inset-y-0 right-0 rtl:right-auto rtl:left-0 w-72 bg-white shadow-xl transform transition-transform duration-300 ease-in-out z-50 ${
            isMenuOpen ? 'translate-x-0 rtl:-translate-x-0' : 'translate-x-full rtl:-translate-x-full'
          }`}
        >
          <div className="flex justify-between items-center p-4 border-b">
            <span className="logo-text text-2xl font-bold text-primary-700">Sea Greats</span>
            <button
              className="w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 transition-colors"
              onClick={() => setIsMenuOpen(false)}
              aria-label="Close Menu"
            >
              <i className="ri-close-line text-2xl text-gray-700"></i>
            </button>
          </div>

          <nav className="py-4 h-[calc(100%-80px)] overflow-y-auto">
            {menuItems.map((item, index) => (
              <div key={index}>
                <Link
                  href={item.href}
                  className="block px-6 py-3 text-gray-700 hover:bg-primary-50 hover:text-primary-600 transition-colors font-medium"
                  onClick={() => setIsMenuOpen(false)}
                >
                  {item.label}
                </Link>
                {item.submenu && (
                  <div className="bg-gray-50 border-y border-gray-100">
                    {item.submenu.map((subitem, subindex) => (
                      <Link
                        key={subindex}
                        href={subitem.href}
                        className="block px-10 py-2 text-sm text-gray-600 hover:bg-primary-50 hover:text-primary-600 transition-colors"
                        onClick={() => setIsMenuOpen(false)}
                      >
                        {subitem.label}
                      </Link>
                    ))}
                  </div>
                )}
              </div>
            ))}
            <div className="px-6 py-4 mt-4 border-t">
              <Link
                href="/admin"
                className="btn btn-primary w-full flex items-center justify-center"
                onClick={() => setIsMenuOpen(false)}
              >
                <i className="ri-user-line mr-2 rtl:ml-2 rtl:mr-0"></i>
                {dict.nav.admin}
              </Link>
            </div>
          </nav>
        </div>

        {/* Backdrop for mobile menu */}
        {isMenuOpen && (
          <div
            className="fixed inset-0 bg-black/50 z-40 lg:hidden"
            onClick={() => setIsMenuOpen(false)}
          ></div>
        )}
      </div>
    </header>
  );
}